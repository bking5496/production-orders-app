🐘 Initializing PostgreSQL database connection...
✅ PostgreSQL database interface ready
🔍 About to run health check...
📋 Labor roster will use existing users table
✅ PostgreSQL schemas already exist, skipping table creation
JWT_SECRET exists: true
✨ Enhanced Production Workflow Endpoints Loaded
✨ Enhanced Downtime Tracking Endpoints Loaded
📊 Downtime Analytics and Reporting Endpoints Loaded
🚨 Real-Time Downtime Alerts and Notifications System Loaded
✨ Enhanced endpoints loaded successfully
🔧 Configuration management system enabled
🚀 Server running on http://localhost:3000
📊 Environment: production
🔐 JWT Secret: Gmqbm...
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🏥 Database health check: {
  status: 'healthy',
  timestamp: 2025-08-03T17:54:47.326Z,
  version: 'PostgreSQL 16.9 (Ubuntu 16.9-0ubuntu0.24.04.1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0, 64-bit',
  pool_total: 1,
  pool_idle: 1,
  pool_waiting: 0
}
ValidationError: The Express 'trust proxy' setting is true, which allows anyone to trivially bypass IP-based rate limiting. See https://express-rate-limit.github.io/ERR_ERL_PERMISSIVE_TRUST_PROXY/ for more information.
    at Object.trustProxy (/home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:167:13)
    at wrappedValidations.<computed> [as trustProxy] (/home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:397:22)
    at Object.keyGenerator (/home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:657:20)
    at /home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:710:32
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async /home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:691:5 {
  code: 'ERR_ERL_PERMISSIVE_TRUST_PROXY',
  help: 'https://express-rate-limit.github.io/ERR_ERL_PERMISSIVE_TRUST_PROXY/'
}
JWT verification failed: jwt malformed
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
New WebSocket connection attempt
✅ WebSocket authenticated: admin (admin)
🔌 WebSocket disconnected: admin
ValidationError: The Express 'trust proxy' setting is true, which allows anyone to trivially bypass IP-based rate limiting. See https://express-rate-limit.github.io/ERR_ERL_PERMISSIVE_TRUST_PROXY/ for more information.
    at Object.trustProxy (/home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:167:13)
    at wrappedValidations.<computed> [as trustProxy] (/home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:397:22)
    at Object.keyGenerator (/home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:657:20)
    at /home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:710:32
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async /home/production-app/production-orders-app/node_modules/express-rate-limit/dist/index.cjs:691:5 {
  code: 'ERR_ERL_PERMISSIVE_TRUST_PROXY',
  help: 'https://express-rate-limit.github.io/ERR_ERL_PERMISSIVE_TRUST_PROXY/'
}
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
New WebSocket connection attempt
✅ WebSocket authenticated: admin (admin)
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
JWT verification failed: jwt malformed
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔌 WebSocket disconnected: admin
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
New WebSocket connection attempt
✅ WebSocket authenticated: admin (admin)
🔌 WebSocket disconnected: admin
New WebSocket connection attempt
✅ WebSocket authenticated: admin (admin)
JWT verification failed: jwt malformed
📺 admin subscribed to: [ 'dashboard', 'orders', 'machines', 'production', 'alerts' ]
JWT verification failed: jwt malformed
JWT verification failed: jwt malformed
🔌 WebSocket disconnected: admin
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
New WebSocket connection attempt
✅ WebSocket authenticated: admin (admin)
📺 admin subscribed to: [ 'dashboard', 'orders', 'machines', 'production', 'alerts' ]
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
📺 admin subscribed to: [ 'dashboard', 'orders', 'machines', 'production', 'alerts' ]
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
📺 admin subscribed to: [ 'machines', 'production' ]
🔗 Client acquired from pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
📺 admin subscribed to: [ 'machines', 'production' ]
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
📺 admin subscribed to: [ 'machines', 'production' ]
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
📺 admin subscribed to: [ 'dashboard', 'orders', 'machines', 'production', 'alerts' ]
🔗 Client acquired from pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
📺 admin subscribed to: [ 'dashboard', 'orders', 'machines', 'production', 'alerts' ]
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
✅ New PostgreSQL client connected
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
🔗 Client acquired from pool
🔓 Client released back to pool
📺 admin subscribed to: [ 'dashboard', 'orders', 'machines', 'production', 'alerts' ]
🔌 WebSocket disconnected: admin
